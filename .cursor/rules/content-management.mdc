---
description:
globs:
alwaysApply: false
---
# Content Management System

This project is a content management system with advanced tagging capabilities. The main components are:

## Core Components
- [src/app/page.tsx](mdc:src/app/page.tsx) - Main page component that renders the content editor and saved content section
- [src/components/ContentEditor.tsx](mdc:src/components/ContentEditor.tsx) - Rich content editor with auto-saving and tag management
- [src/hooks/useAdvancedTagging.ts](mdc:src/hooks/useAdvancedTagging.ts) - Custom hook for AI-powered content tagging

## Key Features
1. Real-time content editing with auto-save
2. AI-powered tag suggestions using NLP and GPT-4
3. Content organization with tags and categories
4. Masonry grid layout for saved content display

## State Management
- Content state is managed through context providers
- Tags are processed using the advanced tagging system
- Content is persisted using Supabase as the backend

# Content Management

The application uses a combination of hooks and context for content management.

## Content Hooks

### useContent Hook
`[src/hooks/useContent.ts](mdc:src/hooks/useContent.ts)` provides content management:
```typescript
import { useContent } from '@/hooks/useContent'

export function MyComponent() {
  const { content, loading } = useContent(userId)
  // Use content data
}
```

### useTags Hook
`[src/hooks/useTags.ts](mdc:src/hooks/useTags.ts)` manages content tags:
```typescript
import { useTags } from '@/hooks/useTags'

export function MyComponent() {
  const { tags, loading } = useTags(userId)
  // Use tags data
}
```

### useCollaboration Hook
`[src/hooks/useCollaboration.ts](mdc:src/hooks/useCollaboration.ts)` handles real-time collaboration:
```typescript
import { useCollaboration } from '@/hooks/useCollaboration'

export function MyComponent() {
  const { collaborators, updatePresence } = useCollaboration(contentId, user)
  // Use collaboration features
}
```

## Content Context

`[src/lib/content-context.tsx](mdc:src/lib/content-context.tsx)` provides global content state:
```typescript
import { useContent } from '@/lib/content-context'

export function MyComponent() {
  const { contents, loading, error, fetchContents } = useContent()
  // Use global content state
}
```

## Best Practices

1. Use appropriate hooks for specific functionality
2. Implement proper error handling
3. Handle loading states
4. Clean up subscriptions and listeners
5. Use optimistic updates for better UX
6. Implement proper type safety
7. Handle real-time updates appropriately
8. Use proper error boundaries

