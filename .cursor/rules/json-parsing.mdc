---
description: 
globs: 
alwaysApply: false
---
# JSON Parsing Standards

## Core Implementation
The main JSON parsing logic is implemented in [src/hooks/useAISuggestions.ts](mdc:src/hooks/useAISuggestions.ts). This hook handles parsing AI responses containing JSON data.

## Key Rules

1. **Use JSON5 for All Parsing**
   - Import and use `json5` instead of native `JSON.parse`
   - Handles comments, trailing commas, and more lenient formatting
   - Example from [src/hooks/useAISuggestions.ts](mdc:src/hooks/useAISuggestions.ts):
   ```typescript
   import JSON5 from 'json5';
   // ...
   parsedContent = JSON5.parse(cleanedContent);
   ```

2. **Clean Input Before Parsing**
   - Remove markdown code blocks
   - Trim whitespace
   - Example:
   ```typescript
   if (content.includes('```')) {
     content = content.replace(/```json\n?|\n?```/g, '').trim();
   }
   ```

3. **Proper Error Handling**
   - Always wrap JSON parsing in try-catch
   - Log original content on failure
   - Throw specific error messages
   ```typescript
   try {
     parsed = JSON5.parse(content);
   } catch (error) {
     console.error("Failed to parse:", content);
     throw new Error("Invalid JSON response");
   }
   ```

4. **Validate Parsed Structure**
   - Check for required fields
   - Verify array types
   - Example:
   ```typescript
   if (!parsed?.suggestions || !Array.isArray(parsed.suggestions)) {
     throw new Error("Response missing suggestions array");
   }
   ```

## Anti-Patterns

1. ❌ **Never Use Regex for JSON Parsing**
   - Don't extract JSON with regex patterns
   - Don't attempt to fix malformed JSON with regex
   - Don't reconstruct JSON from partial matches

2. ❌ **Never Skip Input Validation**
   - Don't assume clean API responses
   - Don't ignore markdown formatting
   - Don't skip structure validation

## Type Safety

Define clear interfaces for JSON structures:
```typescript
interface APISuggestion {
  id?: string;
  suggestion: string;
  type?: string;
  explanation?: string;
  improvedContent?: string;
}
```

## Testing Guidelines

1. Test with various input formats:
   - Clean JSON
   - Markdown-wrapped JSON
   - JSON with comments
   - JSON with trailing commas
   - Invalid JSON for error cases

2. Validate error messages are helpful and specific

## Dependencies

Required package:
```json
{
  "dependencies": {
    "json5": "^2.2.3"
  }
}
```
