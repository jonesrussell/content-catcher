---
description:
globs:
alwaysApply: false
---
# Supabase Client Setup

The application uses three different Supabase client configurations:

1. Client-side components use `[src/utils/supabase/client.ts](mdc:src/utils/supabase/client.ts)` which provides:
   - Browser-specific cookie handling
   - Type-safe database operations
   - Real-time subscriptions

2. Server components use `[src/utils/supabase/server.ts](mdc:src/utils/supabase/server.ts)` which provides:
   - Server-side cookie handling via Next.js cookies
   - Async cookie operations
   - Error handling for server component contexts

3. Middleware uses `[src/utils/supabase/middleware.ts](mdc:src/utils/supabase/middleware.ts)` which provides:
   - Request/response cookie handling
   - Session management
   - Authentication checks

## Usage Patterns

### Client Components
```typescript
import { createClient } from '@/utils/supabase/client'

export function MyComponent() {
  const supabase = createClient()
  // Use supabase client for data operations
}
```

### Server Components
```typescript
import { createClient } from '@/utils/supabase/server'

export async function MyServerComponent() {
  const supabase = await createClient()
  // Use supabase client for data operations
}
```

### Middleware
```typescript
import { createClient } from '@/utils/supabase/middleware'

export function middleware(request: NextRequest) {
  const { supabase, response } = createClient(request)
  // Use supabase client for auth checks
  return response
}
```

## Best Practices

1. Always use the appropriate client for your context (client/server/middleware)
2. Handle errors appropriately for each context
3. Use TypeScript types from `Database` type for type safety
4. Implement proper cleanup for real-time subscriptions
5. Handle authentication state changes consistently
