---
description:
globs:
alwaysApply: false
---
# ESLint Configuration Guide

This project uses ESLint for code quality and style enforcement. We maintain a flat ESLint configuration structure using the new configuration format.

## Configuration Files
- `eslint.config.js` - Main ESLint configuration file using the new flat config format
- `.eslintignore` - Specifies files and directories to be ignored by ESLint

## Configuration Structure
Our ESLint setup includes:
1. TypeScript support with `@typescript-eslint`
2. React-specific rules with `eslint-plugin-react` and `eslint-plugin-react-hooks`
3. Import sorting and organization with `eslint-plugin-import`
4. Accessibility checks with `eslint-plugin-jsx-a11y`

## File-Specific Rules
- TypeScript files (`.ts`, `.tsx`): Strict TypeScript rules applied
- JavaScript files (`.js`, `.jsx`): More lenient rules with basic ES6+ checks
- Test files (`*.test.ts`, `*.test.tsx`): Relaxed rules for test-specific patterns

## Running ESLint
- Use `npm run lint` to check all files
- Use `npm run lint:fix` to automatically fix issues where possible
- VSCode ESLint extension will show issues in real-time

## Best Practices
1. Don't disable ESLint rules globally
2. Use `// eslint-disable-next-line` for specific exceptions
3. Document any rule customizations in comments
4. Keep the configuration DRY by using rule presets
